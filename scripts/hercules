#!/bin/bash
#######################################################
#######################################################
StopServers() {
	NAME=$1
	hosts=$2
        echo "# Hercules: Stopping $NAME servers in $hosts"
        for node in "${hosts[@]}"
        do
                (ssh $node "pkill hercules_server" ) &
        done
}

## Uncomment when working in Tucan.
H_PATH=$(dirname `pwd`)
H_BUILD_PATH=$H_PATH/build
H_BASH_PATH=$H_PATH/bash
META_PORT=70000
DATA_PORT=80000
MALLEABILITY=0
NUM_METADATA=1
NUM_DATA=1
NODES_FOR_CLIENTS=1
OPTIND=2
BLOCK_SIZE=512
STORAGE_SIZE=0

rm .hercules.conf
echo -e "
H_PATH $H_PATH\n
H_META_PORT $META_PORT\n
H_DATA_PORT $DATA_PORT\n
H_BLOCK_SIZE $BLOCK_SIZE\n
H_STORAGE_SIZE $STORAGE_SIZE
" > .hercules.conf

while getopts :m:d:o:c: flag
do
    case "${flag}" in
	m) META_SERVER_FILE=${OPTARG};;
        d) DATA_SERVER_FILE=${OPTARG};;
	o) OUTPUT_FILE=${OPTARG};;
	c) CLIENT_FILE=${OPTARG};;
    esac
done
echo "DATA_SERVER_FILE=$DATA_SERVER_FILE"
echo "META_SERVER_FILE=$META_SERVER_FILE"
echo "OUTPUT_FILE=$OUTPUT_FILE"
echo "STATUS=$1"
STATUS=$1
if [[ $STATUS != "stop" && $STATUS != "start" ]]; then
	echo "Incorrect argument"
	exit 0
fi
SLURM=$([ -z "$SLURM_CLUSTER_NAME" ] && echo 0 || echo 1)
if [[ $STATUS = "stop" ]];
then
	#readarray -t hosts < <($([ -z "$DATA_SERVER_FILE" ] && echo $H_DATA_HOSTS || echo $DATA_SERVER_FILE))

	#echo $H_DATA_HOSTS
	#echo $H_META_HOSTS
	#if [ -z "$DATA_SERVER_FILE" ] && [ -z "$H_DATA_HOSTS" ] && [ -z "$H_META_HOSTS" ]; then
	#	echo "Nodes to stop hercules' services has not been defined"
	#	exit 0
	#fi
	readarray -t hosts < data_hostfile
	echo "hosts=$hosts"
	StopServers "data" $hosts
	#readarray -t hosts < <($([ -z "$META_SERVER_FILE" ] && echo $H_META_HOSTS || echo $META_SERVER_FILE))	
	readarray -t hosts < meta_hostfile
	echo "hosts=$hosts"
	StopServers "metadata" $hosts
	exit 0
fi

echo "SLURM=$SLURM"
if [[ $SLURM -eq 1 ]]; then
	srun -pernode hostname |sort > hostfile
fi

echo "# Hercules: Running metadata servers"
if [[ -z $META_SERVER_FILE ]];
then
	if [[ $SLURM -eq 0 ]]; then
		echo "Metadata server file not specified, please set one using -m <filename> flag"
		exit 0
	fi
	echo "Metadata server file not specified, getting information from slurm"
	readarray -t meta_hosts < <(head -n $NUM_METADATA hostfile)
else
	readarray -t meta_hosts < $META_SERVER_FILE
fi
#export H_META_HOSTS=$meta_hosts
echo $meta_hosts > meta_hostfile

i=0
for node in "${meta_hosts[@]}"
do
	echo "Running metadata server $i in $node..."
	if [[ $SLURM -eq 0 ]]; then
		(ssh $node "cd $H_BASH_PATH && $H_BUILD_PATH/hercules_server m --server-id=$i --stat-logfile=./metadata --port=$META_PORT --bufsize=0") &
	else
		srun --exclusive --export=ALL -N 1 -n 1 -w $node $H_BUILD_PATH/hercules_server m --server-id=$i --stat-logfile=./metadata --port=$META_PORT --bufsize=0 &
	fi
	i=$(($i+1))
done
sleep 10

echo "# Hercules: Running data servers"
if [[ -z $DATA_SERVER_FILE ]];
then
	if [[ $SLURM -eq 0 ]]; then
		echo "Data server file not specified, please set one using -d <filename> flag"
		exit 0
	fi
	echo "Data server file not specified, getting information from slurm"
	readarray -t data_hosts < <(tail -n +$((NUM_METADATA+1)) hostfile | head -n $NUM_DATA)
else
	readarray -t data_hosts < $DATA_SERVER_FILE
fi
#export H_DATA_HOSTS=$data_hosts
echo $data_hosts > data_hostfile
#META_NODE=$(head -n 1 $META_SERVER_FILE)
META_NODE=${meta_hosts[0]}
NUM_METADATA=${#meta_hosts[@]}
NUM_DATA=${#data_hosts[@]}
#echo "H_NUM_DATA $NUM_DATA" > .hercules.env
i=0
for node in "${data_hosts[@]}"
do
	echo "Running data server $i in $node..."
	if [[ $SLURM -eq 0 ]]; then
	        (ssh $node "cd $H_BASH_PATH && $H_BUILD_PATH/hercules_server d --server-id=$i --imss-uri=imss:// --port=$DATA_PORT --bufsize=0 --stat-host=$META_NODE --stat-port=$META_PORT --num-servers=$NUM_DATA --deploy-hostfile=./data_hostfile --block-size=$BLOCK_SIZE --storage-size=$STORAGE_SIZE") &
	else
		srun --exclusive --export=ALL -N 1 -n 1 -w $node $H_BUILD_PATH/hercules_server m --server-id=$i --stat-logfile=./metadata --port=$META_PORT --bufsize=0 &	
	fi
	i=$(($i+1))
done

tail -n +$((NUM_METADATA+NUM_DATA+1)) hostfile | head -n $NODES_FOR_CLIENTS > client_hostfile

sleep 5
